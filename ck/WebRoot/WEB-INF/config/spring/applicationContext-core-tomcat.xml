<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.2.xsd 
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">
    <mvc:annotation-driven>
        <mvc:message-converters register-defaults="true">
            <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                <property name="supportedMediaTypes" value="text/plain;charset=UTF-8"/>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>
    
    <context:component-scan base-package="com.will"></context:component-scan>
    
    <!-- <mvc:interceptors>
    	<mvc:interceptor>
    		<mvc:mapping path="/**"/>
    		<bean class="com.oceansoft.interceptor.LogRecordInterceptor"></bean>
    	</mvc:interceptor>
    </mvc:interceptors> -->
    
    
    <context:property-placeholder location="/WEB-INF/config/properties/application.properties" />
	
	
    <!-- <mvc:view-controller path="/" view-name="profile/login"/> -->
    <!--
    <bean class="com.oceansoft.framework.processor.BeanSqlAnnoationProcessor">
        <constructor-arg name="order" value="10"/>
    </bean>
      -->
    <bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
        <!-- 设置为true以忽略对Accept Header的支持 -->
        <property name="ignoreAcceptHeader" value="true"/>
        <!-- 在没有扩展名时默认展现形式 -->
        <property name="defaultContentType" value="text/html"/>
        <!-- 扩展名至mimeType的映射 -->
        <property name="mediaTypes">
            <map>
                <entry key="json" value="application/json"/>
                <entry key="jsf" value="text/html"/>
                <entry key="jpg" value="image/jpg"/>
                <entry key="html" value="text/html"/>
            </map>
        </property>
        <!-- 用于开启 /userinfo/123?format=json 的支持 -->
        <property name="favorParameter" value="true"/>
        <property name="viewResolvers">
            <list>
                <bean class="org.springframework.web.servlet.view.BeanNameViewResolver"/>
                <!--JSP视图 -->
                <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
                    <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
                    <property name="prefix" value="/WEB-INF/views/"/>
                    <property name="suffix" value=".jsp"/>
                    <property name="order" value="1"/>
                </bean>
            </list>
        </property>
        <property name="defaultViews">
            <list>
                <!-- JSON -->
                <bean class="org.springframework.web.servlet.view.json.MappingJacksonJsonView"/>
            </list>
        </property>
    </bean>
    <!-- 配置数据源 tomcat下用 -->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
          destroy-method="close">
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <!-- 连接池启动时的初始值 -->
        <!-- <property name="initialSize" value="1" /> no -->
        <!-- 连接池的最大值 -->
        <property name="maxActive" value="120"/>
        <!-- 最大空闲值.当经过一个高峰时间后，连接池可以慢慢将已经用不到的连接慢慢释放一部分，一直减少到maxIdle为止 -->
        <property name="maxIdle" value="20"/>
        <!-- 最小空闲值.当空闲的连接数少于阀值时，连接池就会预申请去一些连接，以免洪峰来时来不及申请 -->
        <!-- <property name="minIdle" value="1" /> no -->
    </bean>
  
    <!-- JDBC操作模板类 -->
    <bean id="namedParameterJdbcTemplate"
          class="org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate">
        <constructor-arg ref="dataSource"/>
    </bean>
    
    <bean id="simpleJdbcInsert" class="org.springframework.jdbc.core.simple.SimpleJdbcInsert"
          scope="prototype">
        <constructor-arg ref="dataSource"/>
    </bean>
    
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    
    <bean id="nativeJdbcExtractor"
          class="org.springframework.jdbc.support.nativejdbc.CommonsDbcpNativeJdbcExtractor"
          lazy-init="true"/>
   
    <bean id="oracleLobHandler" class="org.springframework.jdbc.support.lob.OracleLobHandler"
          lazy-init="true">
        <property name="nativeJdbcExtractor" ref="nativeJdbcExtractor"/>
    </bean>
  
    <bean id="funcGetActorName" class="org.springframework.jdbc.core.simple.SimpleJdbcCall">
        <constructor-arg ref="dataSource"/>
    </bean>
    
    <!--声明式事务控制 -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    
    <tx:annotation-driven transaction-manager="transactionManager"/>
    
    <!-- 配置静态资源，直接映射到对应的文件夹，不被DispatcherServlet处理 -->  
    <mvc:resources mapping="/resource/**" location="/resource/"/>  
    <mvc:resources mapping="/scripts/**" location="/scripts/"/>  
    <mvc:resources mapping="/styles/**" location="/styles/"/>  
    
    <!-- 文件上传解析器 -->
    <bean id="multipartResolver"
          class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="maxUploadSize" value="6291456"/><!-- 单位为K -->
    </bean>
    
    <!-- 全局异常处理 -->
    <!-- <bean id="exceptionResolver"
          class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <property name="defaultErrorView" value="/error/error"/>
        <property name="defaultStatusCode" value="500"/>
        <property name="warnLogCategory" value="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver"/>
    </bean> -->
	<!-- 缓存配置 -->
	<!-- <bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
		<property name="configLocation" value="WEB-INF/config/cache/ehcache-local.xml" />
	</bean> -->
	<!-- MyBatis配置 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<!-- 注入MyBatis配置文件 -->
		<property name="configLocation" value="classpath:com/will/config/configuration.xml"></property>
		<property name="mapperLocations" value="classpath*:com/will/bussiness/**/*Mapper.xml"></property>
		<property name="typeAliasesPackage" value="com.will.bussiness.system.entity,com.will.bussiness.ck.entity"></property>
		<property name="plugins">
			<bean class="com.will.plugin.PagePlugin"></bean>
		</property>
	</bean>
	<!-- MyBatis Mapper扫描 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">  
       <property name="basePackage" value="com.will.bussiness.system.dao,com.will.bussiness.ck.dao" />  
       <property name="annotationClass" value="com.will.utility.SupperMapper"/>  
       <!-- <property name="sqlSessionFactoryBeanName" ref="sqlSessionFactory"/>   -->
    </bean>  
</beans>